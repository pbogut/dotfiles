# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see http://i3wm.org/docs/userguide.html for a complete reference!

exec swaylock -i ~/.config/sway/locktile.png -t
set $mod Mod4
set $hype Mod4+Mod1+Ctrl+Shift

set $sh exec sh -c
set $exec exec
set $term exec terminal
set $termfloat exec terminal-float
# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8

# hide coursor, use exec to avoid trigerring it again when reloading config
seat * hide_cursor when-typing enable
seat * hide_cursor 5000
# VRR / FreeSync
output * adaptive_sync on

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod
focus_on_window_activation focus

# popups
popup_during_fullscreen leave_fullscreen

# start a terminal
bindsym $mod+Return $exec "~/.scripts/terminal"

# kill focused window
bindsym $mod+Shift+q kill

# start program launcher
bindsym $mod+Ctrl+semicolon $exec fuzzel
bindsym $mod+semicolon $exec fuzzel-run

# named workspaces
set $wsbrowser 1:  browser
set $wsterm    2:  term
set $wscomm    3: / comm
set $wscode    4:  code
set $wsmedia   5:  media
set $wswork    6:  work
set $wsdb       db
set $wsdash    9:  dash
set $wsrss      rss
set $wsvm       VM
set $wssteam   8:  steam
set $wsgame    7:  gaming
set $wsdocs    7:  docs
set $ws3d       3d

bindsym $mod+d exec "dunstctl context"
bindsym $mod+Shift+d exec "dunstctl close"

# change focus
set $focus exec sway-focus
bindsym $mod+h $focus left
bindsym $mod+j $focus down
bindsym $mod+k $focus up
bindsym $mod+l $focus right
# just in case if for some reason sway-focus is not working
bindsym $hype+h focus left
bindsym $hype+j focus down
bindsym $hype+k focus up
bindsym $hype+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left $focus left
bindsym $mod+Down $focus down
bindsym $mod+Up $focus up
bindsym $mod+Right $focus right

# move focused window
bindsym $mod+Shift+H move left
bindsym $mod+Shift+J move down
bindsym $mod+Shift+K move up
bindsym $mod+Shift+L move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation - who the fuck made it other way around?
# bindsym $mod+v split v

# split in vertical orientation - who the fuck made it other way around?
# bindsym $mod+s split h

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle
bindsym $mod+Shift+F fullscreen toggle global

# change container layout (stacked, tabbed, toggle split)
# bindsym $mod+o layout stacking
# tabbed layout
# bindsym $mod+t layout tabbed
# normal laoyout and toggle
# bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle
bindsym $mod+Ctrl+space sticky toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# switch to workspace
bindsym $mod+1 workspace --no-auto-back-and-forth $wsbrowser
bindsym $mod+2 workspace --no-auto-back-and-forth $wsterm
bindsym $mod+3 workspace --no-auto-back-and-forth $wscomm
bindsym $mod+4 workspace --no-auto-back-and-forth $wscode
bindsym $mod+5 workspace --no-auto-back-and-forth $wsmedia
bindsym $mod+6 workspace --no-auto-back-and-forth $wswork
bindsym $mod+7 workspace --no-auto-back-and-forth $wsdocs
bindsym $mod+8 workspace --no-auto-back-and-forth $wssteam
bindsym $mod+9 workspace --no-auto-back-and-forth $wsdash
bindsym $mod+0 workspace --no-auto-back-and-forth 10

# move focused container to workspace and switch workspace
bindsym $mod+Shift+1 move container to workspace 1; workspace 1
bindsym $mod+Shift+2 move container to workspace 2; workspace 2
bindsym $mod+Shift+3 move container to workspace 3; workspace 3
bindsym $mod+Shift+4 move container to workspace 4; workspace 4
bindsym $mod+Shift+5 move container to workspace 5; workspace 5
bindsym $mod+Shift+6 move container to workspace 6; workspace 6
bindsym $mod+Shift+7 move container to workspace 7; workspace 7
bindsym $mod+Shift+8 move container to workspace 8; workspace 8
bindsym $mod+Shift+9 move container to workspace 9; workspace 9
bindsym $mod+Shift+0 move container to workspace 10; workspace 10

# move focused container to workspace
bindsym $mod+Ctrl+1 move container to workspace 1
bindsym $mod+Ctrl+2 move container to workspace 2
bindsym $mod+Ctrl+3 move container to workspace 3
bindsym $mod+Ctrl+4 move container to workspace 4
bindsym $mod+Ctrl+5 move container to workspace 5
bindsym $mod+Ctrl+6 move container to workspace 6
bindsym $mod+Ctrl+7 move container to workspace 7
bindsym $mod+Ctrl+8 move container to workspace 8
bindsym $mod+Ctrl+9 move container to workspace 9
bindsym $mod+Ctrl+0 move container to workspace 10

workspace_auto_back_and_forth yes

# reload the configuration file
# bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+R reload
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+E exec "swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your X session.' -b 'Yes, exit sway' 'sway exit'"

# resize window (you can also use the mouse for that)
set $mode_resize Resize (h) shrink width, (l) grow width, (j) shrink height, (k) grow height, (Esc) done
mode "$mode_resize" {
        bindsym Mod1+h resize shrink width 1 px
        bindsym Mod1+k resize grow height 1 px
        bindsym Mod1+j resize shrink height 1 px
        bindsym Mod1+l resize grow width 1 px

        bindsym Shift+h resize shrink width 50 px
        bindsym Shift+k resize grow height 50 px
        bindsym Shift+j resize shrink height 50 px
        bindsym Shift+l resize grow width 50 px

        bindsym h resize shrink width 100 px
        bindsym k resize grow height 100 px
        bindsym j resize shrink height 100 px
        bindsym l resize grow width 100 px

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}
bindsym $mod+r mode "$mode_resize"

# screen lock with delay after, so suspend / hibernate with locked screen
set $Locker swaylock -t --image /usr/share/i3-lock-session/locktile.png
set $mode_system System (l) lock, (w) switch, (e) logout, (r) reboot, (Shift+s) shutdown, (b) backup and shutdown, (Esc) cancel
mode "$mode_system" {

    # lock screen, then go back to default mode
    bindsym l exec $Locker, mode "default"
    bindsym e exec swaymsg exit, mode "default"
    bindsym w exec dm-tool switch-to-greeter, mode "default"
    bindsym r exec reboot, mode "default"
    bindsym b $exec "backintime backup & sleep 5s; backintime shutdown", mode "default"
    bindsym Shift+s exec poweroff, mode "default"

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+q mode "$mode_system"

# fixes dbus issue for some reason (long gtk apps startup)
exec systemctl --user import-environment
exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
exec swaybg -i "$(find ~/Pictures/wallpaper -type f | shuf -n 1)"
exec_always $HOME/.scripts/sway-startup.sh

set $WOBSOCK $XDG_RUNTIME_DIR/wob.sock
exec rm -f $WOBSOCK && mkfifo $WOBSOCK && tail -f $WOBSOCK | wob

# class                 border  backgr. text    indicator child_border
client.focused          #4c7899 #285577 #ffffff #2e9ef4   #285577
client.focused_inactive #333333 #5f676a #ffffff #484e50   #5f676a
client.unfocused        #333333 #222222 #888888 #292d2e   #222222
client.urgent           #2f343a #900000 #ffffff #900000   #900000
client.placeholder      #000000 #0c0c0c #ffffff #000000   #0c0c0c
client.background       #ffffff

default_border pixel 1
titlebar_padding 4 2
hide_edge_borders --i3 both

workspace_layout stacking

set $display_laptop eDP-1
set $display_right HDMI-A-1
set $display_main DP-1

# assign workspace to display
workspace "$wsbrowser" output $display_laptop
workspace "$wsbrowser" output $display_main
workspace "$wscomm" output $display_right
workspace "$wsdash" output $display_right
workspace "$wsmedia" output $display_left
workspace "$wsgame" output $display_main
workspace "$wsdocs" output $display_main
workspace "$wssteam" output $display_right
workspace "$wswork" output $display_right
workspace "$ws3d" output $display_right
workspace "$wscode" output $display_main

# assign apps to specific workspaces
assign [title="^DBeaver" class="^SWT$"] $wsdb
assign [title="^Dbeaver$"] $wsdb
assign [title="^toggl$"] $wsdash
assign [title="^todoist$"] $wsdash
assign [title="^jira$"] $wsdash
assign [app_id="^ferdium$"] $wscomm
assign [class="^discord$"] $wscomm
assign [title="Freezer"] $wsmedia
assign [instance="^Godot_Engine$"] $ws3d
assign [instance="^Godot_Editor$"] $ws3d

for_window [title="^.*$"] $exec ~/.scripts/sway/sort-workspace.sh

for_window [app_id="^yad$"] floating enable
for_window [class="^Yad$"] floating enable
for_window [class="scrcpy"] floating enable; move scratchpad
for_window [class="explorer.exe"] floating enable
for_window [class="krusader"] floating disable
for_window [class="^feh$"] fullscreen enable
for_window [title="SCREENSAVER"] fullscreen enable
for_window [title="SPLASH_SCREEN"] floating enable
for_window [title="SPLASH_SCREEN"] fullscreen disable
for_window [title="SPLASH_SCREEN"] title_format "<span alpha='1'>%title</span>"
for_window [title="SPLASH_SCREEN"] border pixel 1
for_window [title="^FLOATING_WINDOW$"] floating enable
for_window [app_id="^org.wezterm.floating$"] floating enable
for_window [app_id="^org.wezterm.floating$"] resize set width 1200
for_window [app_id="^org.wezterm.floating$"] resize set height 700
for_window [class="^csgo_linux64"] floating disable
for_window [instance="^Godot_Engine$"] floating enable
for_window [instance="^Godot_Editor$"] floating enable
for_window [class="^Netsoft-com.netsoft.hubstaff$"] move scratchpad; scratchpad show
for_window [class="^Toggl Desktop$"] move scratchpad; scratchpad show
for_window [app_id="com.nextcloud.desktopclient.nextcloud"] floating enable
for_window [app_id="chrome-didegimhafipceonhjepacocaffmoppf-Default"] floating enable
for_window [app_id="^firefox" title="^Picture-in-Picture$"] floating enable; sticky on
for_window [title="^Picture in picture$"] floating enable; sticky on
for_window [title="^Picture-in-Picture"] floating enable; sticky on
for_window [app_id="nngceckbapebfimnlniiiahkandclblb"] floating enable;

# laptop mirror
workspace "mirror" output HDMI-A-1
assign [app_id="at.yrlf.wl_mirror"] "mirror"
for_window [app_id="at.yrlf.wl_mirror"] floating enable fullscreen enable

# Media Keys
bindsym XF86MonBrightnessUp $exec "brightnessctl -e1 -n2 set 5%+"
bindsym XF86MonBrightnessDown $exec "brightnessctl -e1 -n2 set 5%-"
bindsym Shift+XF86AudioRaiseVolume $exec "~/.scripts/volume.sh up 'Arctis Pro'"
bindsym Shift+XF86AudioLowerVolume $exec "~/.scripts/volume.sh down 'Arctis Pro'"
bindsym XF86AudioRaiseVolume $exec "~/.scripts/volume.sh up ', Default$'"
bindsym XF86AudioLowerVolume $exec "~/.scripts/volume.sh down ', Default$'"
bindsym XF86AudioPause $exec "~/.scripts/playerctl.sh play-pause"
bindsym XF86AudioPlay $exec "~/.scripts/playerctl.sh play-pause"
bindsym Ctrl+XF86AudioPlay $exec "~/.scripts/audio.sh --next --without 'Arctis Pro'"
bindsym XF86AudioNext $exec "~/.scripts/waybar/vrp10.sh --toggle; pkill -RTMIN+20 -x waybar"

bindsym F11 $exec "~/.scripts/playerctl.sh next-player"
bindsym $mod+XF86AudioRaiseVolume $exec "~/.scripts/playerctl.sh next-player"
bindsym $mod+XF86AudioLowerVolume $exec "~/.scripts/playerctl.sh prev-player"

bindsym $mod+n $exec "sway-workspace --next --same-output"
bindsym $mod+p $exec "sway-workspace --prev --same-output"
bindsym $mod+Tab workspace back_and_forth
bindsym $mod+Shift+N $exec "sway-workspace --next --same-output --move"
bindsym $mod+Shift+P $exec "sway-workspace --prev --same-output --move"

bindsym $mod+c $exec "sway-workspace --new --start-idx 10"
bindsym $mod+Shift+C $exec "sway-workspace --new --move --start-idx 10"
bindsym $mod+Shift+X $exec "sway-workspace --new --send --start-idx 10"
bindsym $mod+Ctrl+w $exec "~/.scripts/sway/sort-workspace.sh --extended"
bindsym $mod+x $exec "~/.scripts/sway/hidden-switches.sh"

bindsym --release $mod+v $sh 'xdotool keyup Super && xdotool type "$(xsel)"'
bindsym $mod+Ctrl+i $sh '~/.scripts/vim-anywhere.sh --selection'
bindsym $mod+Ctrl+f $exec swaymsg '[app_id="^ferdium$"] focus' || ferdium
bindsym $mod+Ctrl+b $exec "~/.scripts/dmenu-bluetooth"
bindsym $mod+Ctrl+n $exec "~/.scripts/networkmanager_dmenu"
bindsym $mod+Ctrl+r $exec swaymsg '[app_id="com.gitlab.newsflash"] focus' || newsflash

bindsym $mod+Ctrl+m $exec swaymsg '[app_id="chrome-www.deezer.com__en_-Default"] focus' || chromium --app=https://www.deezer.com/en/
bindsym $mod+Ctrl+s $exec "~/.scripts/sway/switch-or-launch.sh --scratchpad '^Volume Control$' 'pavucontrol'"
bindsym $mod+Ctrl+k $termfloat -t 'Khal' -e zsh -c "stty -ixon ; khal interactive"
bindsym $mod+Ctrl+d $exec swaymsg '[app_id="discord"] focus' || discord.sh
bindsym $mod+Ctrl+t $exec "~/.scripts/todo.sh"
bindsym $mod+Ctrl+e $exec swaymsg '[title="^EMAIL_MUTT$"] focus' || email
bindsym $mod+Ctrl+l move workspace to output $display_right
bindsym $mod+Ctrl+h move workspace to output $display_main
bindsym $mod+backspace move workspace to output $display_main

bindsym $mod+Ctrl+p $exec "~/.scripts/wezterm-list-projects"
bindsym $mod+Ctrl+u $exec "~/.scripts/users.sh --switch"

bindsym $mod+b $exec swaymsg '[app_id="org.qutebrowser.qutebrowser"] focus' || browser
bindsym $mod+Ctrl+c workspace $wscode
bindsym $mod+m focus output $display_left
bindsym $mod+comma focus output $display_main
bindsym $mod+period focus output $display_right
bindsym $mod+apostrophe $exec "~/.scripts/sway/copyq.sh"
# browser shortcut
bindsym $mod+slash $exec "~/.scripts/quickbrowser.sh"
# screen shots
# full screen (image magick required)
bindsym Print $exec swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' | grim -g - ~/Pictures/screenshots/screenshot_from_$(date +%Y-%m-%d_%H-%M-%S).png
bindsym $mod+Print $exec "grim ~/Pictures/screenshots/screenshot_from_$(date +%Y-%m-%d_%H-%M-%S).png"
bindsym Shift+Print $exec "slurp | grim -g - ~/Pictures/screenshots/screenshot_from_$(date +%Y-%m-%d_%H-%M-%S).png"

bindsym Ctrl+Print $exec "~/.scripts/sway/shadowplay.sh --screen-shot"
bindsym Shift+Ctrl+Print $exec "~/.scripts/sway/shadowplay.sh --save"

for_window [class="^looking.*"] move scratchpad
bindsym $mod+g scratchpad show
bindsym $mod+Shift+G move scratchpad
