#!/usr/bin/env bash
#=================================================
# name:   vaultwarden
# author: pbogut <pbogut@pbogut.me>
# date:   16/08/2024
#=================================================
usage() {
  echo "Ussage: ${0##*/} [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -h, --help              display this help and exit"
  echo "      --open              open selected entry url"
  echo "      --login             type in user and password"
  echo "      --user              type in user"
  echo "      --pass              type in password"
  echo "      --totp              type in totp code"
  echo "      --create            create entry"
}

__unlock() {
  vaultwarden-dmenu --unlock
}
__dmenu() {
  if [[ -n "$WAYLAND_DISPLAY" ]]; then
    fuzzel --cache /dev/null --dmenu --prompt "Open URL: "
  else
    rofi -dmenu -p
  fi
}
__remove_url_prefix() {
    sed -E 's,^(accounts|dash|dashboard|online|app|login|panel|auth|system)\.,,' # remove common prefixes
}
__remove_url_suffix() {
    sed -E 's,\.(co\.uk|com\.net|com\...|..|...)$,,' # remove common suffixes
}
__create_entry() {
  domain=$(echo "$QUTE_URL" | awk -F'[/:]' '{print $4}')
  url=$(echo "$QUTE_URL" | awk -F'[/:]' '{print $1 "://" $4}')
  name=$(echo "$domain" | __remove_url_prefix | __remove_url_suffix)
  vaultwarden-dmenu --create "$url" "$name"
}
__list_urls() {
  rbw list --fields name,uris | while read -r line; do
    name=${line%%$'\t'*}
    uris=${line#*$'\t'}
    if [[ ! "$line" =~ $'\t' ]]; then
      # no uri
      continue
    fi
    IFS=' ; ' read -r -a auris <<< "$uris"
    for uri in "${auris[@]}"; do
      if [[ $uri != "" ]] && [[ $name != "" ]]; then
        echo "$name|$uri"
      fi
    done
  done
}
__url() {
  echo "$QUTE_URL" |
    sed 's,^[a-z]*://\([^/]*\).*,\1,' | # remove scheme
    __remove_url_prefix
}
__qb_type() {
  echo "fake-key ${1// /<space>}" >> "$QUTE_FIFO"
}
__qb_open() {
  resource="$1"
  uri=$(echo "$resource" | jq -r '.login.uris[0].uri')
  echo "open $uri" >> "$QUTE_FIFO"
}
__qb_login() {
  resource="$1"
  user=$(jq -r '.user' <<< "$resource")
  pass=$(jq -r '.pass' <<< "$resource")
  login_instruction=$(jq -r '.login_instruction' <<< "$resource")
  echo "$login_instruction" \
    | sed "s,:,\n,g" \
    | while read -r line; do
      if [[ $line == "<pass>" ]]; then
        __qb_type "$pass";
      elif [[ $line == "<user>" ]]; then
        __qb_type "$user";
      else
        __qb_type "$line";
      fi
    done
}

if test $# -eq 0; then
  usage
  exit 0
fi
while test $# -gt 0; do
  case "$1" in
    --open)
      __unlock
      url=$(__list_urls | column -s'|' -t -o ' | ' | sort | uniq | __dmenu | cut -d'|' -f2)
      if [[ $url == "" ]]; then
        exit 0
      fi
      echo "open $url" >> "$QUTE_FIFO"
      exit 0
      ;;
    --login)
      resource=$(vaultwarden-dmenu --json "$(__url)")
      if [[ $resource == "" ]]; then
        exit 1
      fi
      __qb_login "$resource"
      exit 0
      ;;
    --user)
      resource=$(vaultwarden-dmenu --json "$(__url)")
      if [[ $resource == "" ]]; then
        exit 1
      fi
      user=$(jq -r '.user' <<< "$resource")
      __qb_type "$user"
      exit 0
      ;;
    --pass)
      resource=$(vaultwarden-dmenu --json "$(__url)")
      if [[ $resource == "" ]]; then
        exit 1
      fi
      pass=$(jq -r '.pass' <<< "$resource")
      __qb_type "$pass"
      exit 0
      ;;
    --totp)
      resource=$(vaultwarden-dmenu --json "$(__url)")
      if [[ $resource == "" ]]; then
        exit 1
      fi
      totp=$(jq -r '.totp' <<< "$resource")
      __qb_type "$totp"
      exit 0
      ;;
    --create)
      __create_entry
      exit 0
      ;;
    --help|-h)
      usage
      exit 0
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done
